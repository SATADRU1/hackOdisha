events {
    worker_connections 4096;   # Increased for high concurrency
    multi_accept on;
}

http {
    ##
    # Basic Performance Tweaks
    ##
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;   # Adjust based on API needs

    ##
    # MIME Types
    ##
    include       mime.types;
    default_type  application/octet-stream;

    ##
    # Logging
    ##
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    ##
    # Upstreams
    ##
    upstream frontend {
        server frontend:3000;
    }

    upstream gofr-backend {
        server gofr-backend:8081;
    }

    upstream studio {
        server studio:3001;
    }

    upstream blockdag-node {
        server blockdag-node:8080;
    }

    ##
    # Rate limiting
    ##
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=studio:10m rate=5r/s;

    ##
    # Compression
    ##
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    gzip_proxied any;

    # Optional Brotli (if nginx compiled with it)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/javascript application/json application/xml+rss;

    ##
    # Security Headers
    ##
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:;" always;

    ##
    # Main Server
    ##
    server {
        listen 80;
        server_name localhost;

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Deny unwanted HTTP methods
        if ($request_method !~ ^(GET|POST|PUT|DELETE|OPTIONS)$) {
            return 405;
        }

        # Frontend routes
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # GoFR Backend API
        location /api/v1/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://gofr-backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Studio API
        location /studio/ {
            limit_req zone=studio burst=10 nodelay;
            proxy_pass http://studio/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # BlockDAG Node API
        location /blockdag/ {
            proxy_pass http://blockdag-node/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket - Studio
        location /studio/ws {
            proxy_pass http://studio/ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
        }

        # WebSocket - BlockDAG
        location /blockdag/ws {
            proxy_pass http://blockdag-node/ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
        }

        # Static files caching
        location ~* \.(?:ico|gif|jpe?g|png|svg|woff2?|eot|ttf|otf|css|js)$ {
            expires 6M;
            access_log off;
            add_header Cache-Control "public, immutable";
            proxy_pass http://frontend;
        }

        # Error pages
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS server (uncomment when SSL certs are ready)
    # server {
    #     listen 443 ssl http2;
    #     server_name yourdomain.com;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #     ssl_prefer_server_ciphers off;
    #
    #     include snippets/ssl-params.conf;
    #
    #     # Same location blocks as HTTP
    # }
}
