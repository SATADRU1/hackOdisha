services:
  # PostgreSQL Database  
  postgres:
    image: postgres:15-alpine
    container_name: hackodisha-postgres-dev
    environment:
      POSTGRES_DB: hackodisha
      POSTGRES_USER: hackodisha
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hackodisha123}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./deploy/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - hackodisha-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hackodisha"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hackodisha-redis-dev
    command: redis-server --appendonly yes
    volumes:
      - redis_data_dev:/data
    ports:
      - "6379:6379"
    networks:
      - hackodisha-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # BlockDAG Node (minimal for development)
  blockdag-node:
    build:
      context: ./services/blockdag-node
      dockerfile: Dockerfile
    container_name: hackodisha-blockdag-dev
    environment:
      - NODE_ENV=development
      - PORT=8080
      - P2P_PORT=4001
      - DATA_DIR=/data/blockdag
    volumes:
      - blockdag_data_dev:/data/blockdag
    ports:
      - "8080:8080"
      - "4001:4001"
    networks:
      - hackodisha-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Studio Service (Development Mode with Live Reload)
  studio:
    build:
      context: ./services/studio
      dockerfile: Dockerfile.dev
    container_name: hackodisha-studio-dev
    environment:
      - NODE_ENV=development
      - PORT=3001
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://hackodisha:${POSTGRES_PASSWORD:-hackodisha123}@postgres:5432/hackodisha
      - REDIS_URL=redis://redis:6379
      - BLOCKDAG_RPC=http://blockdag-node:8080
      - BLOCKDAG_WS=ws://blockdag-node:8080/ws
      - DISABLE_WEBSOCKET=${DISABLE_WEBSOCKET:-true}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VERBWIRE_API_KEY=${VERBWIRE_API_KEY}
      - VERBWIRE_BASE_URL=${VERBWIRE_BASE_URL:-https://api.verbwire.com/v1}
    volumes:
      # Mount source code for live reloading
      - ./services/studio/src:/app/src
      - ./services/studio/prisma:/app/prisma
      - ./services/studio/package.json:/app/package.json
      - /app/node_modules  # Prevent overwriting node_modules
    ports:
      - "3001:3001"
    networks:
      - hackodisha-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  # Next.js Frontend (Development Mode)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.dev
    container_name: hackodisha-frontend-dev
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8081/api/v1
      - NEXT_PUBLIC_STUDIO_URL=http://localhost:3001/api/v1
      - NEXT_PUBLIC_BLOCKDAG_URL=http://localhost:8080/api/v1
    volumes:
      # Mount source code for live reloading
      - .:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    networks:
      - hackodisha-network
    command: npm run dev

  # Simple proxy for development
  nginx-dev:
    image: nginx:alpine
    container_name: hackodisha-nginx-dev
    volumes:
      - ./deploy/nginx.dev.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    networks:
      - hackodisha-network
    depends_on:
      - frontend
      - studio

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  blockdag_data_dev:
    driver: local

networks:
  hackodisha-network:
    driver: bridge
